name: 'Setup Lua and LuaRocks'
description: 'Set up a Lua and LuaRocks environment using lenv'
author: 'mah0x211'
branding:
  icon: 'package'
  color: 'blue'

inputs:
  versions:
    description: 'Space-separated list of Lua:LuaRocks versions to install. Format: <lua-version>:<luarocks-version> (e.g. 5.1.5:latest lj-v2.1:3.8.0)'
    required: false
    default: 'latest:latest'
  active-version:
    description: 'Which Lua:LuaRocks version to use'
    required: false
  cache:
    description: 'Cache the lenv installation'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    -
      name: Determine OS and architecture
      id: verify
      shell: bash
      run: |
        # Determine OS (first letter capitalized as per release assets)
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          echo "OS_NAME=Linux" >> $GITHUB_OUTPUT
          echo "PLATFORM=linux" >> $GITHUB_OUTPUT
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "OS_NAME=Darwin" >> $GITHUB_OUTPUT
          echo "PLATFORM=macosx" >> $GITHUB_OUTPUT
        else
          echo "Unsupported OS: $RUNNER_OS" >&2
          exit 1
        fi

        # Determine architecture (as per release assets)
        ARCH=$(uname -m)
        if [[ "$ARCH" == "x86_64" || "$ARCH" == "amd64" ]]; then
          echo "ARCH=x86_64" >> $GITHUB_OUTPUT
        elif [[ "$ARCH" == "arm64" || "$ARCH" == "aarch64" ]]; then
          echo "ARCH=arm64" >> $GITHUB_OUTPUT
        elif [[ "$ARCH" == "i386" || "$ARCH" == "i686" ]]; then
          echo "ARCH=i386" >> $GITHUB_OUTPUT
        else
          echo "Unsupported architecture: $ARCH" >&2
          exit 1
        fi

        # Validate version specification
        read -r -a INPUT_VERSIONS <<< "${{ inputs.versions }}"
        VERSIONS=()
        for SPEC in "${INPUT_VERSIONS[@]}"; do
          SPEC=$(echo "$SPEC" | xargs)
          if [ -z "$SPEC" ]; then
            echo "Error: Empty version specification is not allowed" >&2
            exit 1
          fi
          case "$SPEC" in
            *[[:space:]]*)
              echo "Error: Invalid version specification: $SPEC" >&2
              echo "Version specification must not contain spaces" >&2
              exit 1
              ;;
            *)
              VERSIONS+=("$SPEC")
              ;;
          esac
        done

        VERSIONS_STR="${VERSIONS[*]}"
        echo "VERSIONS=${VERSIONS_STR}" >> $GITHUB_OUTPUT

        # cache key must not contain spaces, so replace them with underscores
        CACHE_VERSIONS="${VERSIONS_STR// /_}"
        echo "CACHE_VERSIONS=${CACHE_VERSIONS}" >> $GITHUB_OUTPUT

    -
      name: Check for lenv cache
      id: cache
      if: ${{ inputs.cache == 'true' }}
      uses: actions/cache@v4
      with:
        path: .lenv
        key: ${{ runner.os }}-${{ steps.verify.outputs.ARCH }}-lenv-${{ steps.verify.outputs.CACHE_VERSIONS }}

    -
      name: Install dependencies
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get install -q libreadline-dev libncurses-dev -y
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install readline ncurses
        fi
    -
      name: Install lenv
      if: ${{ inputs.cache != 'true' || steps.cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        LENV_VERSION="v0.9.1"
        OS="${{ steps.verify.outputs.OS_NAME }}"
        ARCH="${{ steps.verify.outputs.ARCH }}"

        # Create temp directory for downloads
        WORK_DIR=$(pwd)
        TEMP_DIR=$(mktemp -d)
        cd $TEMP_DIR

        # Download archive
        ARCHIVE_NAME="lenv_${OS}_${ARCH}.tar.gz"
        DOWNLOAD_URL="https://github.com/mah0x211/lenv/releases/download/${LENV_VERSION}/${ARCHIVE_NAME}"
        echo "Downloading lenv from: $DOWNLOAD_URL"
        curl -L -o ${ARCHIVE_NAME} ${DOWNLOAD_URL}

        # Download checksums file
        CHECKSUMS_URL="https://github.com/mah0x211/lenv/releases/download/${LENV_VERSION}/checksums.txt"
        curl -L -o checksums.txt ${CHECKSUMS_URL}

        # Extract expected checksum for our file
        EXPECTED_CHECKSUM=$(grep "${ARCHIVE_NAME}" checksums.txt | awk '{print $1}')

        if [ -z "$EXPECTED_CHECKSUM" ]; then
          echo "Warning: Could not find checksum for ${ARCHIVE_NAME}" >&2
        else
          # Calculate actual checksum
          if command -v shasum &> /dev/null; then
            ACTUAL_CHECKSUM=$(shasum -a 256 ${ARCHIVE_NAME} | awk '{print $1}')
          elif command -v sha256sum &> /dev/null; then
            ACTUAL_CHECKSUM=$(sha256sum ${ARCHIVE_NAME} | awk '{print $1}')
          else
            echo "Warning: No checksum utility found, skipping verification" >&2
          fi

          # Verify checksum
          if [ ! -z "$ACTUAL_CHECKSUM" ] && [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "Checksum verification failed!" >&2
            echo "Expected: $EXPECTED_CHECKSUM" >&2
            echo "Actual: $ACTUAL_CHECKSUM" >&2
            exit 1
          else
            echo "Checksum verification passed!"
          fi
        fi

        # Extract archive
        tar -xzf ${ARCHIVE_NAME}

        # Verify the extracted lenv executable
        ./lenv help

        # Move lenv to working directory and set PATH
        cd $WORK_DIR
        mv $TEMP_DIR/lenv .
        chmod +x lenv
        mkdir -p ./.lenv/bin
        mv ./lenv ./.lenv/bin/
        export PATH="$(pwd)/.lenv/bin:$PATH"

        # Run setup to create required directories (in project mode)
        lenv -p setup
        # Fetch remote version lists
        lenv -p fetch

        # Clean up
        cd - > /dev/null
        rm -rf $TEMP_DIR

    -
      name: Set PATH environment variable
      shell: bash
      run: |
        # Add lenv bin and lua bin to PATH
        export PATH="$(pwd)/.lenv/bin:$PATH"
        echo "$(pwd)/.lenv/bin" | tee -a $GITHUB_PATH
        echo "$(lenv -p path bin)" | tee -a $GITHUB_PATH

    -
      name: Install Lua and LuaRocks
      if: ${{ inputs.cache != 'true' || steps.cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        # Install Lua and/or LuaRocks with the specified versions
        read -r -a VERSIONS <<< "${{ steps.verify.outputs.VERSIONS }}"
        for SPEC in "${VERSIONS[@]}"; do
          # if lua version is not specified, and current lua version is not set,
          # use the latest version as default
          if [ -z "${SPEC%%:*}" ] && [ -z "$(lenv -p current lua)" ]; then
            echo "Lua is not installed, using latest version as default"
            SPEC="latest:${SPEC#:}"
          fi

          echo "Installing with spec: ${SPEC}"

          if [[ "$SPEC" == lj-* ]]; then
            # without PLATFORM variables if prefixed with "lj-"
            lenv -p install "${SPEC}"
          else
            lenv -p install "${SPEC}" "${{ steps.verify.outputs.PLATFORM }}"
          fi
        done

    -
      name: Set LUA_PATH and LUA_CPATH environment variables
      shell: bash
      run: |
        # Add Lua lib and clib paths to environment variables
        echo "export LUA_PATH and LUA_CPATH to environment variables"
        LUA_PATH="$(lenv -p path lualib)"
        LUA_CPATH="$(lenv -p path luaclib)"
        # Output to both console and $GITHUB_ENV for debugging purposes
        echo "LUA_PATH=$LUA_PATH" | tee -a $GITHUB_ENV
        echo "LUA_CPATH=$LUA_CPATH" | tee -a $GITHUB_ENV

    -
      name: Use Lua and LuaRocks
      if: ${{ inputs.active-version != '' }}
      shell: bash
      run: |
        # if inputs.active-version is not set, throw an error
        ACTIVE_VERSION="$(echo "${{ inputs.active-version }}" | xargs)"
        if [ -z "$ACTIVE_VERSION" ]; then
          echo "Error: No active version specified" >&2
          exit 1
        fi
        lenv -p use "$ACTIVE_VERSION"


outputs:
  cache-hit:
    description: 'Whether the cache was hit'
    value: ${{ inputs.cache == 'true' && steps.cache.outputs.cache-hit == 'true' && 'true' || 'false' }}

